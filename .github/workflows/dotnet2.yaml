name: Build and Push Docker image

on:
  push:
    branches:
      - main  # Trigger the workflow when there's a push to the main branch
  pull_request:
    branches:
      - main

jobs:

  testing:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # - name: Super-linter
      #   uses: super-linter/super-linter@v6.5.0  # x-release-please-version
      #   env:
      #    # To report GitHub Actions status checks
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2.3.0 # Ex: v2.1.0, See the latest version at https://github.com/marketplace/actions/sonarcloud-scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          #projectBaseDir: my-custom-directory
          args: >
            -Dsonar.organization=nyshaa
            -Dsonar.projectKey=nyshaa_Dotnet-demo


  # build_and_push:
  #   # needs: testing
  #   runs-on: windows-latest  # This workflow will run on a Windows runner
  #   #runs-on: ubuntu-latest

  #   permissions:
  #     contents: read
  #     packages: read
  #     # To report GitHub Actions status checks
  #     statuses: write

  #   steps:
  #     - name: Check out the repository
  #       uses: actions/checkout@v3

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: eu-north-1

  #     - name: Log in to Amazon ECR
  #       run: |
  #         aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin 973905176396.dkr.ecr.eu-north-1.amazonaws.com

  #     - name: Build Docker image
  #       run: |
  #         docker build . -t 973905176396.dkr.ecr.eu-north-1.amazonaws.com/windows1:latest

  #     - name: Push Docker image to Amazon ECR
  #       run: |
  #         docker push 973905176396.dkr.ecr.eu-north-1.amazonaws.com/windows1:latest

  # deploy staging:
  #   needs: build_and_push 
  #   runs-on: ubuntu-latest
  #   steps:

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: eu-north-1

  #     - name: Deploy to Amazon ECS
  #       uses: aws-actions/amazon-ecs-deploy-task-definition@v1
  #       with:
  #         task-definition: windows1-revision1.json
  #         service: window1
  #         cluster: fargate
  #         wait-for-service-stability: true


  # review:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: LINE Notify
  #       uses: snow-actions/line-notify@v1.1.0
  #       with:
  #         access_token: ${{ secrets.LINE_ACCESS_TOKEN }}          # LINE Access Token
  #         message: |
  #           Please review the application 
          
  #     - uses: trstringer/manual-approval@v1
  #       with:
  #         secret: ${{ secrets.GITHUB_TOKEN }}
  #         approvers: nyshaa
  #         minimum-approvals: 1


  # deploy production:
  #   needs: review
  #   runs-on: ubuntu-latest
  #   steps:

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: eu-north-1

  #     - name: Deploy to Amazon ECS
  #       uses: aws-actions/amazon-ecs-deploy-task-definition@v1
  #       with:
  #         task-definition: windows1-revision1.json
  #         service: window1
  #         cluster: fargate
  #         wait-for-service-stability: true